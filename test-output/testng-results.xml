<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="1" ignored="0" total="14" passed="12" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-03-09T16:01:47 EET" name="RegressionTest" finished-at="2025-03-09T16:02:32 EET" duration-ms="44855">
    <groups>
    </groups>
    <test started-at="2025-03-09T16:01:47 EET" name="ErrorValidationTest" finished-at="2025-03-09T16:02:08 EET" duration-ms="21428">
      <class name="tests.functional.ErrorValidationTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.functional.ErrorValidationTest@2416c658]" started-at="2025-03-09T16:01:47 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-09T16:01:55 EET" duration-ms="7650" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.functional.ErrorValidationTest@2416c658]" started-at="2025-03-09T16:01:55 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-03-09T16:01:57 EET" duration-ms="1306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method retried="true" signature="testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.functional.ErrorValidationTest@2416c658]" started-at="2025-03-09T16:01:57 EET" name="testInvalidLoginLandingPage" data-provider="getErrorValidationData" finished-at="2025-03-09T16:02:06 EET" duration-ms="8835" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@77661732]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at org.junit.Assert.fail(Assert.java:87)
at org.junit.Assert.assertTrue(Assert.java:42)
at org.junit.Assert.assertTrue(Assert.java:53)
at tests.functional.ErrorValidationTest.testInvalidLoginLandingPage(ErrorValidationTest.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.ErrorValidationTest@2416c658]" started-at="2025-03-09T16:02:06 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:06 EET" duration-ms="130" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLoginLandingPage status=SKIP method=ErrorValidationTest.testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.functional.ErrorValidationTest@2416c658] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.functional.ErrorValidationTest@2416c658]" started-at="2025-03-09T16:02:06 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-03-09T16:02:07 EET" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.functional.ErrorValidationTest@2416c658]" started-at="2025-03-09T16:02:07 EET" name="testInvalidLoginLandingPage" data-provider="getErrorValidationData" finished-at="2025-03-09T16:02:07 EET" duration-ms="300" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@4d94f829]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at org.junit.Assert.fail(Assert.java:87)
at org.junit.Assert.assertTrue(Assert.java:42)
at org.junit.Assert.assertTrue(Assert.java:53)
at tests.functional.ErrorValidationTest.testInvalidLoginLandingPage(ErrorValidationTest.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.ErrorValidationTest@2416c658]" started-at="2025-03-09T16:02:07 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:07 EET" duration-ms="199" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLoginLandingPage status=FAILURE method=ErrorValidationTest.testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.functional.ErrorValidationTest@2416c658] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.functional.ErrorValidationTest@2416c658]" started-at="2025-03-09T16:02:07 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-09T16:02:08 EET" duration-ms="1346" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.functional.ErrorValidationTest -->
    </test> <!-- ErrorValidationTest -->
    <test started-at="2025-03-09T16:01:47 EET" name="LogOutTest" finished-at="2025-03-09T16:02:17 EET" duration-ms="29580">
      <class name="tests.functional.LogOutTest">
        <test-method is-config="true" signature="setupEnvironment()[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:01:47 EET" name="setupEnvironment" description="Sets up the environment for Allure reporting." finished-at="2025-03-09T16:01:47 EET" duration-ms="74" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupEnvironment -->
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:01:47 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-09T16:01:50 EET" duration-ms="2999" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:01:54 EET" name="setUp" finished-at="2025-03-09T16:02:05 EET" duration-ms="11045" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:02:05 EET" name="testLogOut" data-provider="getLandingPageData" finished-at="2025-03-09T16:02:06 EET" duration-ms="1055" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@5b900476]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogOut -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:02:06 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:07 EET" duration-ms="206" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLogOut status=SUCCESS method=LogOutTest.testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.functional.LogOutTest@7b18658a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:02:07 EET" name="setUp" finished-at="2025-03-09T16:02:07 EET" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:02:07 EET" name="testLogOut" data-provider="getLandingPageData" finished-at="2025-03-09T16:02:08 EET" duration-ms="1352" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@7309f85d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogOut -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:02:08 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:08 EET" duration-ms="128" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLogOut status=SUCCESS method=LogOutTest.testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.functional.LogOutTest@7b18658a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:02:08 EET" name="setUp" finished-at="2025-03-09T16:02:08 EET" duration-ms="71" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:02:08 EET" name="testLogOut" data-provider="getLandingPageData" finished-at="2025-03-09T16:02:15 EET" duration-ms="6233" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@36a85020]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogOut -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:02:15 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:15 EET" duration-ms="332" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLogOut status=SUCCESS method=LogOutTest.testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.functional.LogOutTest@7b18658a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.functional.LogOutTest@7b18658a]" started-at="2025-03-09T16:02:15 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-09T16:02:17 EET" duration-ms="1635" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.functional.LogOutTest -->
    </test> <!-- LogOutTest -->
    <test started-at="2025-03-09T16:01:47 EET" name="RemoveFromCartTest" finished-at="2025-03-09T16:02:19 EET" duration-ms="32457">
      <class name="tests.functional.RemoveFromCartTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:01:47 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-09T16:01:56 EET" duration-ms="8709" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:01:56 EET" name="setup" finished-at="2025-03-09T16:02:00 EET" duration-ms="4091" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:02:00 EET" name="testRemoveFromCart" data-provider="getLandingPageData" finished-at="2025-03-09T16:02:10 EET" duration-ms="10089" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@742f6aba]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:02:10 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:10 EET" duration-ms="188" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:02:10 EET" name="setup" finished-at="2025-03-09T16:02:10 EET" duration-ms="117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:02:10 EET" name="testRemoveFromCart" data-provider="getLandingPageData" finished-at="2025-03-09T16:02:11 EET" duration-ms="877" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@65931451]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:02:11 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:12 EET" duration-ms="155" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:02:12 EET" name="setup" finished-at="2025-03-09T16:02:12 EET" duration-ms="68" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:02:12 EET" name="testRemoveFromCart" data-provider="getLandingPageData" finished-at="2025-03-09T16:02:18 EET" duration-ms="5984" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@5b2ac6c1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:02:18 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:18 EET" duration-ms="287" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.functional.RemoveFromCartTest@72465eb2]" started-at="2025-03-09T16:02:18 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-09T16:02:19 EET" duration-ms="1571" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.functional.RemoveFromCartTest -->
    </test> <!-- RemoveFromCartTest -->
    <test started-at="2025-03-09T16:01:47 EET" name="SubmitOrderTest" finished-at="2025-03-09T16:02:27 EET" duration-ms="40160">
      <class name="tests.functional.SubmitOrderTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:01:47 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-09T16:01:54 EET" duration-ms="7315" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:01:55 EET" name="setup" finished-at="2025-03-09T16:02:12 EET" duration-ms="17734" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:02:12 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-03-09T16:02:16 EET" duration-ms="3544" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@41e5df8b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:02:16 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:16 EET" duration-ms="234" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:02:16 EET" name="setup" finished-at="2025-03-09T16:02:16 EET" duration-ms="164" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:02:16 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-03-09T16:02:18 EET" duration-ms="2081" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@75acc243]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:02:18 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:19 EET" duration-ms="252" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:02:19 EET" name="setup" finished-at="2025-03-09T16:02:19 EET" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:02:19 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-03-09T16:02:26 EET" duration-ms="6647" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@1aecf17]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:02:26 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:26 EET" duration-ms="206" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.functional.SubmitOrderTest@11a8042c]" started-at="2025-03-09T16:02:26 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-09T16:02:27 EET" duration-ms="1412" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.functional.SubmitOrderTest -->
    </test> <!-- SubmitOrderTest -->
    <test started-at="2025-03-09T16:01:47 EET" name="PriceLowtoHighFilterationTest" finished-at="2025-03-09T16:02:32 EET" duration-ms="44855">
      <class name="tests.functional.PriceLowtoHighTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:01:47 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-09T16:01:56 EET" duration-ms="9099" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:01:56 EET" name="setup" finished-at="2025-03-09T16:02:13 EET" duration-ms="16510" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:02:13 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-03-09T16:02:15 EET" duration-ms="2506" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@6145a4c6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:02:15 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:16 EET" duration-ms="399" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:02:16 EET" name="setup" finished-at="2025-03-09T16:02:17 EET" duration-ms="1746" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:02:17 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-03-09T16:02:19 EET" duration-ms="1465" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@4e60d159]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:02:19 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:19 EET" duration-ms="383" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:02:19 EET" name="setup" finished-at="2025-03-09T16:02:19 EET" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:02:19 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-03-09T16:02:30 EET" duration-ms="10960" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@5686b2d4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:02:30 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-09T16:02:31 EET" duration-ms="190" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.functional.PriceLowtoHighTest@39023dbf]" started-at="2025-03-09T16:02:31 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-09T16:02:32 EET" duration-ms="1266" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.functional.PriceLowtoHighTest -->
    </test> <!-- PriceLowtoHighFilterationTest -->
  </suite> <!-- RegressionTest -->
</testng-results>
