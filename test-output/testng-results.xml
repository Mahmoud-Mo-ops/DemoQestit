<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="1" ignored="0" total="14" passed="12" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-03-06T00:50:27 EET" name="RegressionTest" finished-at="2025-03-06T00:51:16 EET" duration-ms="49558">
    <groups>
    </groups>
    <test started-at="2025-03-06T00:50:27 EET" name="ErrorValidationTest" finished-at="2025-03-06T00:51:01 EET" duration-ms="34577">
      <class name="tests.ErrorValidationTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.ErrorValidationTest@1b560eb0]" started-at="2025-03-06T00:50:27 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-06T00:50:34 EET" duration-ms="7140" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.ErrorValidationTest@1b560eb0]" started-at="2025-03-06T00:50:34 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-03-06T00:50:45 EET" duration-ms="10356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method retried="true" signature="testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.ErrorValidationTest@1b560eb0]" started-at="2025-03-06T00:50:45 EET" name="testInvalidLoginLandingPage" data-provider="getErrorValidationData" finished-at="2025-03-06T00:50:50 EET" duration-ms="4912" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@5b11f956]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at org.junit.Assert.fail(Assert.java:87)
at org.junit.Assert.assertTrue(Assert.java:42)
at org.junit.Assert.assertTrue(Assert.java:53)
at tests.ErrorValidationTest.testInvalidLoginLandingPage(ErrorValidationTest.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.ErrorValidationTest@1b560eb0]" started-at="2025-03-06T00:50:50 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:50:51 EET" duration-ms="494" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLoginLandingPage status=SKIP method=ErrorValidationTest.testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.ErrorValidationTest@1b560eb0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.ErrorValidationTest@1b560eb0]" started-at="2025-03-06T00:50:51 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-03-06T00:50:52 EET" duration-ms="534" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.ErrorValidationTest@1b560eb0]" started-at="2025-03-06T00:50:52 EET" name="testInvalidLoginLandingPage" data-provider="getErrorValidationData" finished-at="2025-03-06T00:50:54 EET" duration-ms="2792" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@2d32622c]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at org.junit.Assert.fail(Assert.java:87)
at org.junit.Assert.assertTrue(Assert.java:42)
at org.junit.Assert.assertTrue(Assert.java:53)
at tests.ErrorValidationTest.testInvalidLoginLandingPage(ErrorValidationTest.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.ErrorValidationTest@1b560eb0]" started-at="2025-03-06T00:50:54 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:50:55 EET" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLoginLandingPage status=FAILURE method=ErrorValidationTest.testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.ErrorValidationTest@1b560eb0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.ErrorValidationTest@1b560eb0]" started-at="2025-03-06T00:50:55 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-06T00:51:01 EET" duration-ms="6248" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.ErrorValidationTest -->
    </test> <!-- ErrorValidationTest -->
    <test started-at="2025-03-06T00:50:27 EET" name="RemoveFromCartTest" finished-at="2025-03-06T00:51:11 EET" duration-ms="44812">
      <class name="tests.RemoveFromCartTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:50:27 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-06T00:50:29 EET" duration-ms="2739" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:50:32 EET" name="setup" finished-at="2025-03-06T00:50:37 EET" duration-ms="5720" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:50:37 EET" name="testRemoveFromCart" data-provider="getLandingPageData" finished-at="2025-03-06T00:50:51 EET" duration-ms="13515" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@456a949b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:50:51 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:50:52 EET" duration-ms="544" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@19b75b2b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:50:52 EET" name="setup" finished-at="2025-03-06T00:50:52 EET" duration-ms="515" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:50:52 EET" name="testRemoveFromCart" data-provider="getLandingPageData" finished-at="2025-03-06T00:50:57 EET" duration-ms="4868" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@15fd0cbf]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:50:57 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:50:57 EET" duration-ms="388" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@19b75b2b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:50:57 EET" name="setup" finished-at="2025-03-06T00:50:58 EET" duration-ms="197" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:50:58 EET" name="testRemoveFromCart" data-provider="getLandingPageData" finished-at="2025-03-06T00:51:08 EET" duration-ms="10117" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@37cfbb7e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:51:08 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:51:08 EET" duration-ms="411" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@19b75b2b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RemoveFromCartTest@19b75b2b]" started-at="2025-03-06T00:51:08 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-06T00:51:11 EET" duration-ms="3240" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.RemoveFromCartTest -->
    </test> <!-- RemoveFromCartTest -->
    <test started-at="2025-03-06T00:50:27 EET" name="LogOutTest" finished-at="2025-03-06T00:51:12 EET" duration-ms="45597">
      <class name="tests.LogOutTest">
        <test-method is-config="true" signature="setupEnvironment()[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:50:26 EET" name="setupEnvironment" description="Sets up the environment for Allure reporting." finished-at="2025-03-06T00:50:27 EET" duration-ms="95" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupEnvironment -->
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:50:27 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-06T00:50:34 EET" duration-ms="7301" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:50:34 EET" name="setUp" finished-at="2025-03-06T00:50:43 EET" duration-ms="9206" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:50:43 EET" name="testLogOut" data-provider="getLandingPageData" finished-at="2025-03-06T00:50:54 EET" duration-ms="11091" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@e8510e5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogOut -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:50:54 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:50:55 EET" duration-ms="618" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLogOut status=SUCCESS method=LogOutTest.testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@6aa7e176] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:50:55 EET" name="setUp" finished-at="2025-03-06T00:50:56 EET" duration-ms="921" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:50:56 EET" name="testLogOut" data-provider="getLandingPageData" finished-at="2025-03-06T00:51:00 EET" duration-ms="4114" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@3fa24e94]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogOut -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:51:00 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:51:01 EET" duration-ms="518" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLogOut status=SUCCESS method=LogOutTest.testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@6aa7e176] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:51:01 EET" name="setUp" finished-at="2025-03-06T00:51:01 EET" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:51:01 EET" name="testLogOut" data-provider="getLandingPageData" finished-at="2025-03-06T00:51:09 EET" duration-ms="8378" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@253a64be]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogOut -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:51:09 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:51:10 EET" duration-ms="328" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLogOut status=SUCCESS method=LogOutTest.testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@6aa7e176] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LogOutTest@6aa7e176]" started-at="2025-03-06T00:51:10 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-06T00:51:12 EET" duration-ms="2459" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.LogOutTest -->
    </test> <!-- LogOutTest -->
    <test started-at="2025-03-06T00:50:27 EET" name="SubmitOrderTest" finished-at="2025-03-06T00:51:14 EET" duration-ms="47768">
      <class name="tests.SubmitOrderTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:50:27 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-06T00:50:33 EET" duration-ms="6038" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:50:33 EET" name="setup" finished-at="2025-03-06T00:50:44 EET" duration-ms="11313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:50:44 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-03-06T00:50:54 EET" duration-ms="10066" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@40faabc6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:50:54 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:50:54 EET" duration-ms="360" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@6a4ccef7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:50:54 EET" name="setup" finished-at="2025-03-06T00:50:55 EET" duration-ms="283" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:50:55 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-03-06T00:51:00 EET" duration-ms="5110" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@38e159d0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:51:00 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:51:00 EET" duration-ms="412" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@6a4ccef7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:51:00 EET" name="setup" finished-at="2025-03-06T00:51:00 EET" duration-ms="188" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:51:00 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-03-06T00:51:12 EET" duration-ms="11356" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@316b78a4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:51:12 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:51:12 EET" duration-ms="410" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@6a4ccef7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.SubmitOrderTest@6a4ccef7]" started-at="2025-03-06T00:51:12 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-06T00:51:14 EET" duration-ms="2005" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.SubmitOrderTest -->
    </test> <!-- SubmitOrderTest -->
    <test started-at="2025-03-06T00:50:27 EET" name="PriceLowtoHighFilterationTest" finished-at="2025-03-06T00:51:16 EET" duration-ms="49558">
      <class name="tests.PriceLowtoHighTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:50:27 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-06T00:50:41 EET" duration-ms="14415" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:50:42 EET" name="setup" finished-at="2025-03-06T00:50:45 EET" duration-ms="3492" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:50:45 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-03-06T00:50:53 EET" duration-ms="7516" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@4f6d555d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:50:53 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:50:53 EET" duration-ms="623" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@36224f93] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:50:53 EET" name="setup" finished-at="2025-03-06T00:50:54 EET" duration-ms="194" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:50:54 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-03-06T00:50:58 EET" duration-ms="4806" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@15d81c3c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:50:58 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:50:59 EET" duration-ms="561" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@36224f93] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:50:59 EET" name="setup" finished-at="2025-03-06T00:50:59 EET" duration-ms="92" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:50:59 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-03-06T00:51:14 EET" duration-ms="15061" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@2197deda]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:51:14 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-06T00:51:15 EET" duration-ms="416" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@36224f93] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.PriceLowtoHighTest@36224f93]" started-at="2025-03-06T00:51:15 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-06T00:51:16 EET" duration-ms="1443" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.PriceLowtoHighTest -->
    </test> <!-- PriceLowtoHighFilterationTest -->
  </suite> <!-- RegressionTest -->
</testng-results>
