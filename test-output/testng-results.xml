<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="1" ignored="0" total="14" passed="12" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-02-19T22:16:20 EET" name="RegressionTest" finished-at="2025-02-19T22:16:47 EET" duration-ms="27056">
    <groups>
      <group name="ErrorValidation">
        <method signature="ErrorValidationTest.testInvalidLoginLandingPage()[pri:0, instance:tests.ErrorValidationTest@78e68401]" name="testInvalidLoginLandingPage" class="tests.ErrorValidationTest"/>
      </group> <!-- ErrorValidation -->
    </groups>
    <test started-at="2025-02-19T22:16:20 EET" name="LoginErrorValidation" finished-at="2025-02-19T22:16:40 EET" duration-ms="19281">
      <class name="tests.ErrorValidationTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.ErrorValidationTest@78e68401]" started-at="2025-02-19T22:16:20 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-02-19T22:16:28 EET" duration-ms="7964" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.ErrorValidationTest@78e68401]" started-at="2025-02-19T22:16:28 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-02-19T22:16:29 EET" duration-ms="1146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method retried="true" signature="testInvalidLoginLandingPage()[pri:0, instance:tests.ErrorValidationTest@78e68401]" started-at="2025-02-19T22:16:29 EET" name="testInvalidLoginLandingPage" description="TC002:- Validates error message for invalid login attempts on the landing page." finished-at="2025-02-19T22:16:33 EET" duration-ms="3045" status="SKIP">
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at org.junit.Assert.fail(Assert.java:87)
at org.junit.Assert.assertTrue(Assert.java:42)
at org.junit.Assert.assertTrue(Assert.java:53)
at tests.ErrorValidationTest.testInvalidLoginLandingPage(ErrorValidationTest.java:53)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.ErrorValidationTest@78e68401]" started-at="2025-02-19T22:16:33 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:34 EET" duration-ms="951" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLoginLandingPage status=SKIP method=ErrorValidationTest.testInvalidLoginLandingPage()[pri:0, instance:tests.ErrorValidationTest@78e68401] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.ErrorValidationTest@78e68401]" started-at="2025-02-19T22:16:34 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-02-19T22:16:34 EET" duration-ms="81" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidLoginLandingPage()[pri:0, instance:tests.ErrorValidationTest@78e68401]" started-at="2025-02-19T22:16:34 EET" name="testInvalidLoginLandingPage" description="TC002:- Validates error message for invalid login attempts on the landing page." finished-at="2025-02-19T22:16:35 EET" duration-ms="1078" status="FAIL">
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at org.junit.Assert.fail(Assert.java:87)
at org.junit.Assert.assertTrue(Assert.java:42)
at org.junit.Assert.assertTrue(Assert.java:53)
at tests.ErrorValidationTest.testInvalidLoginLandingPage(ErrorValidationTest.java:53)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.ErrorValidationTest@78e68401]" started-at="2025-02-19T22:16:35 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:36 EET" duration-ms="1162" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLoginLandingPage status=FAILURE method=ErrorValidationTest.testInvalidLoginLandingPage()[pri:0, instance:tests.ErrorValidationTest@78e68401] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.ErrorValidationTest@78e68401]" started-at="2025-02-19T22:16:36 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-02-19T22:16:40 EET" duration-ms="3729" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.ErrorValidationTest -->
    </test> <!-- LoginErrorValidation -->
    <test started-at="2025-02-19T22:16:20 EET" name="LogOutTest" finished-at="2025-02-19T22:16:44 EET" duration-ms="23895">
      <class name="tests.LogOutTest">
        <test-method is-config="true" signature="setupEnvironment()[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:20 EET" name="setupEnvironment" description="Sets up the environment for Allure reporting." finished-at="2025-02-19T22:16:20 EET" duration-ms="83" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupEnvironment -->
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:20 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-02-19T22:16:28 EET" duration-ms="8110" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:28 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-02-19T22:16:29 EET" duration-ms="837" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:29 EET" name="testLoginLandingPage" description="TC005: Verify the logout functionality to ensure the user is successfully logged out and redirected to the login page." data-provider="getLandingPageData" finished-at="2025-02-19T22:16:34 EET" duration-ms="4740" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@4ae64980]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:34 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:35 EET" duration-ms="1042" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLoginLandingPage status=SUCCESS method=LogOutTest.testLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@111c229c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:35 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-02-19T22:16:35 EET" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:35 EET" name="testLoginLandingPage" description="TC005: Verify the logout functionality to ensure the user is successfully logged out and redirected to the login page." data-provider="getLandingPageData" finished-at="2025-02-19T22:16:39 EET" duration-ms="3298" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@149d1363]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:39 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:40 EET" duration-ms="940" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLoginLandingPage status=SUCCESS method=LogOutTest.testLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@111c229c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:40 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-02-19T22:16:40 EET" duration-ms="186" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:40 EET" name="testLoginLandingPage" description="TC005: Verify the logout functionality to ensure the user is successfully logged out and redirected to the login page." data-provider="getLandingPageData" finished-at="2025-02-19T22:16:41 EET" duration-ms="1630" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@30319970]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:41 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:42 EET" duration-ms="1022" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLoginLandingPage status=SUCCESS method=LogOutTest.testLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@111c229c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LogOutTest@111c229c]" started-at="2025-02-19T22:16:42 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-02-19T22:16:44 EET" duration-ms="1851" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.LogOutTest -->
    </test> <!-- LogOutTest -->
    <test started-at="2025-02-19T22:16:20 EET" name="RemoveFromCartTest" finished-at="2025-02-19T22:16:46 EET" duration-ms="25614">
      <class name="tests.RemoveFromCartTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:20 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-02-19T22:16:28 EET" duration-ms="7938" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:28 EET" name="setup" finished-at="2025-02-19T22:16:28 EET" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:29 EET" name="testRemoveFromCart" description="Tc004: Verify that the product catalog sorts items correctly when the &#039;Price Low to High&#039; option is selected." data-provider="getLandingPageData" finished-at="2025-02-19T22:16:37 EET" duration-ms="8325" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@52cef146]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:37 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:38 EET" duration-ms="945" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:38 EET" name="setup" finished-at="2025-02-19T22:16:38 EET" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:38 EET" name="testRemoveFromCart" description="Tc004: Verify that the product catalog sorts items correctly when the &#039;Price Low to High&#039; option is selected." data-provider="getLandingPageData" finished-at="2025-02-19T22:16:41 EET" duration-ms="2725" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@730c3dbb]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:41 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:42 EET" duration-ms="897" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:42 EET" name="setup" finished-at="2025-02-19T22:16:42 EET" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:42 EET" name="testRemoveFromCart" description="Tc004: Verify that the product catalog sorts items correctly when the &#039;Price Low to High&#039; option is selected." data-provider="getLandingPageData" finished-at="2025-02-19T22:16:44 EET" duration-ms="1947" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@1828eeed]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:44 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:44 EET" duration-ms="732" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RemoveFromCartTest@46b2dcc5]" started-at="2025-02-19T22:16:44 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-02-19T22:16:46 EET" duration-ms="1460" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.RemoveFromCartTest -->
    </test> <!-- RemoveFromCartTest -->
    <test started-at="2025-02-19T22:16:20 EET" name="PriceLowtoHighFilterationTest" finished-at="2025-02-19T22:16:46 EET" duration-ms="25849">
      <class name="tests.PriceLowtoHighTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:20 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-02-19T22:16:28 EET" duration-ms="8083" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:28 EET" name="setup" finished-at="2025-02-19T22:16:28 EET" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:29 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-02-19T22:16:36 EET" duration-ms="7317" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@579b54a1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:36 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:37 EET" duration-ms="1116" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@118041c7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:37 EET" name="setup" finished-at="2025-02-19T22:16:37 EET" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:37 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-02-19T22:16:41 EET" duration-ms="3349" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@2579f8fb]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:41 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:42 EET" duration-ms="1170" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@118041c7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:42 EET" name="setup" finished-at="2025-02-19T22:16:42 EET" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:42 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-02-19T22:16:44 EET" duration-ms="2042" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@24dd1bb4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:44 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:45 EET" duration-ms="912" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@118041c7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.PriceLowtoHighTest@118041c7]" started-at="2025-02-19T22:16:45 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-02-19T22:16:46 EET" duration-ms="1402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.PriceLowtoHighTest -->
    </test> <!-- PriceLowtoHighFilterationTest -->
    <test started-at="2025-02-19T22:16:20 EET" name="SubmitOrderTest" finished-at="2025-02-19T22:16:47 EET" duration-ms="27056">
      <class name="tests.SubmitOrderTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:20 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-02-19T22:16:25 EET" duration-ms="5052" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:25 EET" name="setup" finished-at="2025-02-19T22:16:28 EET" duration-ms="2905" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:29 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-02-19T22:16:37 EET" duration-ms="8199" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@50765921]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:37 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:38 EET" duration-ms="909" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@2620e717] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:38 EET" name="setup" finished-at="2025-02-19T22:16:38 EET" duration-ms="87" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:38 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-02-19T22:16:43 EET" duration-ms="4418" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@1e9f8e1b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:43 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:43 EET" duration-ms="864" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@2620e717] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:43 EET" name="setup" finished-at="2025-02-19T22:16:44 EET" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:44 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-02-19T22:16:46 EET" duration-ms="1943" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@11313933]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:46 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-02-19T22:16:46 EET" duration-ms="438" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@2620e717] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.SubmitOrderTest@2620e717]" started-at="2025-02-19T22:16:46 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-02-19T22:16:47 EET" duration-ms="1351" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.SubmitOrderTest -->
    </test> <!-- SubmitOrderTest -->
  </suite> <!-- RegressionTest -->
</testng-results>
