<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="1" ignored="0" total="14" passed="12" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-03-07T12:17:08 EET" name="RegressionTest" finished-at="2025-03-07T12:17:50 EET" duration-ms="41897">
    <groups>
    </groups>
    <test started-at="2025-03-07T12:17:08 EET" name="ErrorValidationTest" finished-at="2025-03-07T12:17:37 EET" duration-ms="28685">
      <class name="tests.ErrorValidationTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.ErrorValidationTest@9e02f84]" started-at="2025-03-07T12:17:08 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-07T12:17:18 EET" duration-ms="10355" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.ErrorValidationTest@9e02f84]" started-at="2025-03-07T12:17:19 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-03-07T12:17:22 EET" duration-ms="2764" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method retried="true" signature="testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.ErrorValidationTest@9e02f84]" started-at="2025-03-07T12:17:22 EET" name="testInvalidLoginLandingPage" data-provider="getErrorValidationData" finished-at="2025-03-07T12:17:27 EET" duration-ms="5351" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@60a58065]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at org.junit.Assert.fail(Assert.java:87)
at org.junit.Assert.assertTrue(Assert.java:42)
at org.junit.Assert.assertTrue(Assert.java:53)
at tests.ErrorValidationTest.testInvalidLoginLandingPage(ErrorValidationTest.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.ErrorValidationTest@9e02f84]" started-at="2025-03-07T12:17:27 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:28 EET" duration-ms="701" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLoginLandingPage status=SKIP method=ErrorValidationTest.testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.ErrorValidationTest@9e02f84] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.ErrorValidationTest@9e02f84]" started-at="2025-03-07T12:17:28 EET" name="setUp" description="Sets up the test environment by initializing configurations, launching the browser, and navigating to the base URL." finished-at="2025-03-07T12:17:29 EET" duration-ms="307" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.ErrorValidationTest@9e02f84]" started-at="2025-03-07T12:17:29 EET" name="testInvalidLoginLandingPage" data-provider="getErrorValidationData" finished-at="2025-03-07T12:17:30 EET" duration-ms="1531" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@5e0efd47]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at org.junit.Assert.fail(Assert.java:87)
at org.junit.Assert.assertTrue(Assert.java:42)
at org.junit.Assert.assertTrue(Assert.java:53)
at tests.ErrorValidationTest.testInvalidLoginLandingPage(ErrorValidationTest.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLoginLandingPage -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.ErrorValidationTest@9e02f84]" started-at="2025-03-07T12:17:30 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:31 EET" duration-ms="440" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLoginLandingPage status=FAILURE method=ErrorValidationTest.testInvalidLoginLandingPage(data.LoginLandingPageData)[pri:0, instance:tests.ErrorValidationTest@9e02f84] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.ErrorValidationTest@9e02f84]" started-at="2025-03-07T12:17:31 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-07T12:17:37 EET" duration-ms="5951" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.ErrorValidationTest -->
    </test> <!-- ErrorValidationTest -->
    <test started-at="2025-03-07T12:17:08 EET" name="RemoveFromCartTest" finished-at="2025-03-07T12:17:44 EET" duration-ms="36535">
      <class name="tests.RemoveFromCartTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:08 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-07T12:17:12 EET" duration-ms="4296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:18 EET" name="setup" finished-at="2025-03-07T12:17:22 EET" duration-ms="3952" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:22 EET" name="testRemoveFromCart" data-provider="getLandingPageData" finished-at="2025-03-07T12:17:30 EET" duration-ms="8377" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@57a33249]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:30 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:31 EET" duration-ms="542" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@59c43561] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:31 EET" name="setup" finished-at="2025-03-07T12:17:31 EET" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:31 EET" name="testRemoveFromCart" data-provider="getLandingPageData" finished-at="2025-03-07T12:17:34 EET" duration-ms="3025" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@6f02df3d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:34 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:35 EET" duration-ms="486" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@59c43561] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:35 EET" name="setup" finished-at="2025-03-07T12:17:35 EET" duration-ms="261" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:35 EET" name="testRemoveFromCart" data-provider="getLandingPageData" finished-at="2025-03-07T12:17:43 EET" duration-ms="7513" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@841242e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCart -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:43 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:43 EET" duration-ms="287" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testRemoveFromCart status=SUCCESS method=RemoveFromCartTest.testRemoveFromCart(data.LoginLandingPageData)[pri:0, instance:tests.RemoveFromCartTest@59c43561] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RemoveFromCartTest@59c43561]" started-at="2025-03-07T12:17:43 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-07T12:17:44 EET" duration-ms="1661" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.RemoveFromCartTest -->
    </test> <!-- RemoveFromCartTest -->
    <test started-at="2025-03-07T12:17:08 EET" name="LogOutTest" finished-at="2025-03-07T12:17:45 EET" duration-ms="36876">
      <class name="tests.LogOutTest">
        <test-method is-config="true" signature="setupEnvironment()[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:08 EET" name="setupEnvironment" description="Sets up the environment for Allure reporting." finished-at="2025-03-07T12:17:08 EET" duration-ms="127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupEnvironment -->
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:08 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-07T12:17:19 EET" duration-ms="10922" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:19 EET" name="setUp" finished-at="2025-03-07T12:17:25 EET" duration-ms="5469" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:25 EET" name="testLogOut" data-provider="getLandingPageData" finished-at="2025-03-07T12:17:30 EET" duration-ms="5458" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@1233efcb]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogOut -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:30 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:31 EET" duration-ms="524" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLogOut status=SUCCESS method=LogOutTest.testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@52abed9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:31 EET" name="setUp" finished-at="2025-03-07T12:17:31 EET" duration-ms="521" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:31 EET" name="testLogOut" data-provider="getLandingPageData" finished-at="2025-03-07T12:17:34 EET" duration-ms="2350" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@2a6b21ed]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogOut -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:34 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:34 EET" duration-ms="331" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLogOut status=SUCCESS method=LogOutTest.testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@52abed9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:34 EET" name="setUp" finished-at="2025-03-07T12:17:34 EET" duration-ms="313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:34 EET" name="testLogOut" data-provider="getLandingPageData" finished-at="2025-03-07T12:17:43 EET" duration-ms="8373" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@6208c5c2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogOut -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:43 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:43 EET" duration-ms="359" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLogOut status=SUCCESS method=LogOutTest.testLogOut(data.LoginLandingPageData)[pri:0, instance:tests.LogOutTest@52abed9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LogOutTest@52abed9d]" started-at="2025-03-07T12:17:43 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-07T12:17:45 EET" duration-ms="1592" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.LogOutTest -->
    </test> <!-- LogOutTest -->
    <test started-at="2025-03-07T12:17:08 EET" name="SubmitOrderTest" finished-at="2025-03-07T12:17:48 EET" duration-ms="40559">
      <class name="tests.SubmitOrderTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:08 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-07T12:17:20 EET" duration-ms="11662" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:20 EET" name="setup" finished-at="2025-03-07T12:17:26 EET" duration-ms="5677" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:26 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-03-07T12:17:35 EET" duration-ms="9225" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@1aedeeda]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:35 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:35 EET" duration-ms="637" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@64b3b1ce] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:35 EET" name="setup" finished-at="2025-03-07T12:17:36 EET" duration-ms="408" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:36 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-03-07T12:17:40 EET" duration-ms="4143" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@2ae58843]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:40 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:40 EET" duration-ms="286" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@64b3b1ce] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:40 EET" name="setup" finished-at="2025-03-07T12:17:40 EET" duration-ms="161" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:40 EET" name="submitOrderTest" data-provider="getSubmitOrderData" finished-at="2025-03-07T12:17:47 EET" duration-ms="6462" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.SubmitOrderData@7be10f36]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrderTest -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:47 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:47 EET" duration-ms="210" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=submitOrderTest status=SUCCESS method=SubmitOrderTest.submitOrderTest(data.SubmitOrderData)[pri:0, instance:tests.SubmitOrderTest@64b3b1ce] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.SubmitOrderTest@64b3b1ce]" started-at="2025-03-07T12:17:47 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-07T12:17:48 EET" duration-ms="1377" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.SubmitOrderTest -->
    </test> <!-- SubmitOrderTest -->
    <test started-at="2025-03-07T12:17:08 EET" name="PriceLowtoHighFilterationTest" finished-at="2025-03-07T12:17:50 EET" duration-ms="41897">
      <class name="tests.PriceLowtoHighTest">
        <test-method is-config="true" signature="initialize()[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:08 EET" name="initialize" description="Sets up the browser instance for each test." finished-at="2025-03-07T12:17:18 EET" duration-ms="10093" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:19 EET" name="setup" finished-at="2025-03-07T12:17:25 EET" duration-ms="6092" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:25 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-03-07T12:17:31 EET" duration-ms="5684" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@1ff118a8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:31 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:32 EET" duration-ms="992" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:32 EET" name="setup" finished-at="2025-03-07T12:17:32 EET" duration-ms="160" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:32 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-03-07T12:17:35 EET" duration-ms="3392" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@7a41e762]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:35 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:36 EET" duration-ms="790" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:36 EET" name="setup" finished-at="2025-03-07T12:17:36 EET" duration-ms="234" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:36 EET" name="verifyPriceLowToHighSorting" data-provider="getLandingPageData" finished-at="2025-03-07T12:17:48 EET" duration-ms="12129" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[data.LoginLandingPageData@1ee4882]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPriceLowToHighSorting -->
        <test-method is-config="true" signature="captureScreenshotAfterTest(org.testng.ITestResult)[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:48 EET" name="captureScreenshotAfterTest" description="Takes a screenshot after each test method." finished-at="2025-03-07T12:17:49 EET" duration-ms="204" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPriceLowToHighSorting status=SUCCESS method=PriceLowtoHighTest.verifyPriceLowToHighSorting(data.LoginLandingPageData)[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureScreenshotAfterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.PriceLowtoHighTest@1ee5632d]" started-at="2025-03-07T12:17:49 EET" name="tearDown" description="Cleans up resources and quits the browser after each test." finished-at="2025-03-07T12:17:50 EET" duration-ms="1323" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.PriceLowtoHighTest -->
    </test> <!-- PriceLowtoHighFilterationTest -->
  </suite> <!-- RegressionTest -->
</testng-results>
